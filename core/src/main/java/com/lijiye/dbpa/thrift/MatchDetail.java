/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.lijiye.dbpa.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2017-7-31")
public class MatchDetail implements org.apache.thrift.TBase<MatchDetail, MatchDetail._Fields>, java.io.Serializable, Cloneable, Comparable<MatchDetail> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MatchDetail");

  private static final org.apache.thrift.protocol.TField WINNERS_FIELD_DESC = new org.apache.thrift.protocol.TField("winners", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField LOSERS_FIELD_DESC = new org.apache.thrift.protocol.TField("losers", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MatchDetailStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MatchDetailTupleSchemeFactory());
  }

  public List<Short> winners; // required
  public List<Short> losers; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WINNERS((short)1, "winners"),
    LOSERS((short)2, "losers");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WINNERS
          return WINNERS;
        case 2: // LOSERS
          return LOSERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WINNERS, new org.apache.thrift.meta_data.FieldMetaData("winners", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    tmpMap.put(_Fields.LOSERS, new org.apache.thrift.meta_data.FieldMetaData("losers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MatchDetail.class, metaDataMap);
  }

  public MatchDetail() {
  }

  public MatchDetail(
    List<Short> winners,
    List<Short> losers)
  {
    this();
    this.winners = winners;
    this.losers = losers;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MatchDetail(MatchDetail other) {
    if (other.isSetWinners()) {
      List<Short> __this__winners = new ArrayList<Short>(other.winners);
      this.winners = __this__winners;
    }
    if (other.isSetLosers()) {
      List<Short> __this__losers = new ArrayList<Short>(other.losers);
      this.losers = __this__losers;
    }
  }

  public MatchDetail deepCopy() {
    return new MatchDetail(this);
  }

  @Override
  public void clear() {
    this.winners = null;
    this.losers = null;
  }

  public int getWinnersSize() {
    return (this.winners == null) ? 0 : this.winners.size();
  }

  public java.util.Iterator<Short> getWinnersIterator() {
    return (this.winners == null) ? null : this.winners.iterator();
  }

  public void addToWinners(short elem) {
    if (this.winners == null) {
      this.winners = new ArrayList<Short>();
    }
    this.winners.add(elem);
  }

  public List<Short> getWinners() {
    return this.winners;
  }

  public MatchDetail setWinners(List<Short> winners) {
    this.winners = winners;
    return this;
  }

  public void unsetWinners() {
    this.winners = null;
  }

  /** Returns true if field winners is set (has been assigned a value) and false otherwise */
  public boolean isSetWinners() {
    return this.winners != null;
  }

  public void setWinnersIsSet(boolean value) {
    if (!value) {
      this.winners = null;
    }
  }

  public int getLosersSize() {
    return (this.losers == null) ? 0 : this.losers.size();
  }

  public java.util.Iterator<Short> getLosersIterator() {
    return (this.losers == null) ? null : this.losers.iterator();
  }

  public void addToLosers(short elem) {
    if (this.losers == null) {
      this.losers = new ArrayList<Short>();
    }
    this.losers.add(elem);
  }

  public List<Short> getLosers() {
    return this.losers;
  }

  public MatchDetail setLosers(List<Short> losers) {
    this.losers = losers;
    return this;
  }

  public void unsetLosers() {
    this.losers = null;
  }

  /** Returns true if field losers is set (has been assigned a value) and false otherwise */
  public boolean isSetLosers() {
    return this.losers != null;
  }

  public void setLosersIsSet(boolean value) {
    if (!value) {
      this.losers = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WINNERS:
      if (value == null) {
        unsetWinners();
      } else {
        setWinners((List<Short>)value);
      }
      break;

    case LOSERS:
      if (value == null) {
        unsetLosers();
      } else {
        setLosers((List<Short>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WINNERS:
      return getWinners();

    case LOSERS:
      return getLosers();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WINNERS:
      return isSetWinners();
    case LOSERS:
      return isSetLosers();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MatchDetail)
      return this.equals((MatchDetail)that);
    return false;
  }

  public boolean equals(MatchDetail that) {
    if (that == null)
      return false;

    boolean this_present_winners = true && this.isSetWinners();
    boolean that_present_winners = true && that.isSetWinners();
    if (this_present_winners || that_present_winners) {
      if (!(this_present_winners && that_present_winners))
        return false;
      if (!this.winners.equals(that.winners))
        return false;
    }

    boolean this_present_losers = true && this.isSetLosers();
    boolean that_present_losers = true && that.isSetLosers();
    if (this_present_losers || that_present_losers) {
      if (!(this_present_losers && that_present_losers))
        return false;
      if (!this.losers.equals(that.losers))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_winners = true && (isSetWinners());
    list.add(present_winners);
    if (present_winners)
      list.add(winners);

    boolean present_losers = true && (isSetLosers());
    list.add(present_losers);
    if (present_losers)
      list.add(losers);

    return list.hashCode();
  }

  @Override
  public int compareTo(MatchDetail other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWinners()).compareTo(other.isSetWinners());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinners()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winners, other.winners);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLosers()).compareTo(other.isSetLosers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLosers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.losers, other.losers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MatchDetail(");
    boolean first = true;

    sb.append("winners:");
    if (this.winners == null) {
      sb.append("null");
    } else {
      sb.append(this.winners);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("losers:");
    if (this.losers == null) {
      sb.append("null");
    } else {
      sb.append(this.losers);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MatchDetailStandardSchemeFactory implements SchemeFactory {
    public MatchDetailStandardScheme getScheme() {
      return new MatchDetailStandardScheme();
    }
  }

  private static class MatchDetailStandardScheme extends StandardScheme<MatchDetail> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MatchDetail struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WINNERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.winners = new ArrayList<Short>(_list0.size);
                short _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = iprot.readI16();
                  struct.winners.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setWinnersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOSERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.losers = new ArrayList<Short>(_list3.size);
                short _elem4;
                for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                {
                  _elem4 = iprot.readI16();
                  struct.losers.add(_elem4);
                }
                iprot.readListEnd();
              }
              struct.setLosersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MatchDetail struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.winners != null) {
        oprot.writeFieldBegin(WINNERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.winners.size()));
          for (short _iter6 : struct.winners)
          {
            oprot.writeI16(_iter6);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.losers != null) {
        oprot.writeFieldBegin(LOSERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.losers.size()));
          for (short _iter7 : struct.losers)
          {
            oprot.writeI16(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MatchDetailTupleSchemeFactory implements SchemeFactory {
    public MatchDetailTupleScheme getScheme() {
      return new MatchDetailTupleScheme();
    }
  }

  private static class MatchDetailTupleScheme extends TupleScheme<MatchDetail> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MatchDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWinners()) {
        optionals.set(0);
      }
      if (struct.isSetLosers()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWinners()) {
        {
          oprot.writeI32(struct.winners.size());
          for (short _iter8 : struct.winners)
          {
            oprot.writeI16(_iter8);
          }
        }
      }
      if (struct.isSetLosers()) {
        {
          oprot.writeI32(struct.losers.size());
          for (short _iter9 : struct.losers)
          {
            oprot.writeI16(_iter9);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MatchDetail struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list10 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.winners = new ArrayList<Short>(_list10.size);
          short _elem11;
          for (int _i12 = 0; _i12 < _list10.size; ++_i12)
          {
            _elem11 = iprot.readI16();
            struct.winners.add(_elem11);
          }
        }
        struct.setWinnersIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
          struct.losers = new ArrayList<Short>(_list13.size);
          short _elem14;
          for (int _i15 = 0; _i15 < _list13.size; ++_i15)
          {
            _elem14 = iprot.readI16();
            struct.losers.add(_elem14);
          }
        }
        struct.setLosersIsSet(true);
      }
    }
  }

}

